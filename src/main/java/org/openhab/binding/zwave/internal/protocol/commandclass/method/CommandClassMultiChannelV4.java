/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.openhab.binding.zwave.internal.protocol.commandclass.method;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.openhab.binding.zwave.internal.protocol.ZWaveCommandClassPayload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_MULTI_CHANNEL</b> version <b>4</b>.<br>
 *
 * Command Class Multi Channel<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassMultiChannelV4 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassMultiChannelV4.class);

    /**
     * Integer command class key for COMMAND_CLASS_MULTI_CHANNEL
     */
    public final static int COMMAND_CLASS_KEY = 0x60;

    /**
     * Multi Channel Capability Get Command Constant
     */
    public final static int MULTI_CHANNEL_CAPABILITY_GET = 0x09;
    /**
     * Multi Channel Capability Report Command Constant
     */
    public final static int MULTI_CHANNEL_CAPABILITY_REPORT = 0x0A;
    /**
     * Multi Channel Command Encapsulation Command Constant
     */
    public final static int MULTI_CHANNEL_CMD_ENCAP = 0x0D;
    /**
     * Multi Channel End Point Find Command Constant
     */
    public final static int MULTI_CHANNEL_END_POINT_FIND = 0x0B;
    /**
     * Multi Channel End Point Find Report Command Constant
     */
    public final static int MULTI_CHANNEL_END_POINT_FIND_REPORT = 0x0C;
    /**
     * Multi Channel End Point Get Command Constant
     */
    public final static int MULTI_CHANNEL_END_POINT_GET = 0x07;
    /**
     * Multi Channel End Point Report Command Constant
     */
    public final static int MULTI_CHANNEL_END_POINT_REPORT = 0x08;
    /**
     * Multi Instance Cmd Encap Command Constant
     */
    public final static int MULTI_INSTANCE_CMD_ENCAP = 0x06;
    /**
     * Multi Instance Get Command Constant
     */
    public final static int MULTI_INSTANCE_GET = 0x04;
    /**
     * Multi Instance Report Command Constant
     */
    public final static int MULTI_INSTANCE_REPORT = 0x05;
    /**
     * Multi Channel Aggregated Members Get Command Constant
     */
    public final static int MULTI_CHANNEL_AGGREGATED_MEMBERS_GET = 0x0E;
    /**
     * Multi Channel Aggregated Members Report Command Constant
     */
    public final static int MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT = 0x0F;

    /**
     * Creates a new message with the MULTI_CHANNEL_CAPABILITY_GET command
     * Multi Channel Capability Get
     *
     * @param endPoint {@link Integer}
     * @param res {@link Boolean}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiChannelCapabilityGet(Integer endPoint, Boolean res) {
        logger.debug("Creating command message MULTI_CHANNEL_CAPABILITY_GET version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_CHANNEL_CAPABILITY_GET);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= endPoint & 0x7F;
        valProperties1 |= res ? 0x80 : 0;
        outputData.write(valProperties1);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_CHANNEL_CAPABILITY_GET command
     * Multi Channel Capability Get
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiChannelCapabilityGet(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("END_POINT", new Integer(payload[4] & 0x7F));
        response.put("RES", new Boolean((payload[4] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_CHANNEL_CAPABILITY_REPORT command
     * Multi Channel Capability Report
     *
     * @param endPoint {@link Integer}
     * @param dynamic {@link Boolean}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @param commandClass {@link List<Integer>}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiChannelCapabilityReport(Integer endPoint, Boolean dynamic, Integer genericDeviceClass,
            Integer specificDeviceClass, List<Integer> commandClass) {
        logger.debug("Creating command message MULTI_CHANNEL_CAPABILITY_REPORT version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_CHANNEL_CAPABILITY_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= endPoint & 0x7F;
        valProperties1 |= dynamic ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Generic Device Class'
        outputData.write(genericDeviceClass);

        // Process 'Specific Device Class'
        outputData.write(specificDeviceClass);

        // Process 'Command Class'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_CHANNEL_CAPABILITY_REPORT command
     * Multi Channel Capability Report
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiChannelCapabilityReport(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("END_POINT", new Integer(payload[msgOffset] & 0x7F));
        response.put("DYNAMIC", new Boolean((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Generic Device Class'
        response.put("GENERIC_DEVICE_CLASS", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Specific Device Class'
        response.put("SPECIFIC_DEVICE_CLASS", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Command Class'
        List<Integer> valCommandClass = new ArrayList<Integer>();
        while (msgOffset < payload.length) {
            valCommandClass.add(payload[msgOffset]);
            msgOffset++;
        }
        response.put("COMMAND_CLASS", valCommandClass);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_CHANNEL_CMD_ENCAP command
     * Multi Channel Command Encapsulation
     *
     * @param sourceEndPoint {@link Integer}
     * @param res {@link Boolean}
     * @param destinationEndPoint {@link Integer}
     * @param bitAddress {@link Boolean}
     * @param commandClass {@link Integer}
     * @param command {@link Integer}
     * @param parameter {@link int[]}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiChannelCmdEncap(Integer sourceEndPoint, Boolean res, Integer destinationEndPoint,
            Boolean bitAddress, Integer commandClass, Integer command, int[] parameter) {
        logger.debug("Creating command message MULTI_CHANNEL_CMD_ENCAP version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_CHANNEL_CMD_ENCAP);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= sourceEndPoint & 0x7F;
        valProperties1 |= res ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= destinationEndPoint & 0x7F;
        valProperties2 |= bitAddress ? 0x80 : 0;
        outputData.write(valProperties2);

        // Process 'Command Class'
        outputData.write(commandClass);

        // Process 'Command'
        outputData.write(command);

        // Process 'Parameter'
        for (int cntParameter = 0; cntParameter < parameter.length; cntParameter++) {
            outputData.write(parameter[cntParameter]);
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_CHANNEL_CMD_ENCAP command
     * Multi Channel Command Encapsulation
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiChannelCmdEncap(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("SOURCE_END_POINT", new Integer(payload[msgOffset] & 0x7F));
        response.put("RES", new Boolean((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Properties2'
        response.put("DESTINATION_END_POINT", new Integer(payload[msgOffset] & 0x7F));
        response.put("BIT_ADDRESS", new Boolean((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Command Class'
        response.put("COMMAND_CLASS", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Command'
        response.put("COMMAND", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Parameter'
        int lenParameter = payload.length - msgOffset;
        int[] valParameter = new int[lenParameter];
        for (int cntParameter = 0; cntParameter < lenParameter; cntParameter++) {
            valParameter[cntParameter] = payload[cntParameter + msgOffset];
        }
        response.put("PARAMETER", valParameter);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_CHANNEL_END_POINT_FIND command
     * Multi Channel End Point Find
     *
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiChannelEndPointFind(Integer genericDeviceClass, Integer specificDeviceClass) {
        logger.debug("Creating command message MULTI_CHANNEL_END_POINT_FIND version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_CHANNEL_END_POINT_FIND);

        // Process 'Generic Device Class'
        outputData.write(genericDeviceClass);

        // Process 'Specific Device Class'
        outputData.write(specificDeviceClass);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_CHANNEL_END_POINT_FIND command
     * Multi Channel End Point Find
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiChannelEndPointFind(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Generic Device Class'
        response.put("GENERIC_DEVICE_CLASS", new Integer(payload[4]));

        // Process 'Specific Device Class'
        response.put("SPECIFIC_DEVICE_CLASS", new Integer(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_CHANNEL_END_POINT_FIND_REPORT command
     * Multi Channel End Point Find Report
     *
     * @param reportsToFollow {@link Integer}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiChannelEndPointFindReport(Integer reportsToFollow, Integer genericDeviceClass,
            Integer specificDeviceClass) {
        logger.debug("Creating command message MULTI_CHANNEL_END_POINT_FIND_REPORT version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_CHANNEL_END_POINT_FIND_REPORT);

        // Process 'Reports to Follow'
        outputData.write(reportsToFollow);

        // Process 'Generic Device Class'
        outputData.write(genericDeviceClass);

        // Process 'Specific Device Class'
        outputData.write(specificDeviceClass);

        // Process 'vg'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_CHANNEL_END_POINT_FIND_REPORT command
     * Multi Channel End Point Find Report
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiChannelEndPointFindReport(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Reports to Follow'
        response.put("REPORTS_TO_FOLLOW", new Integer(payload[4]));

        // Process 'Generic Device Class'
        response.put("GENERIC_DEVICE_CLASS", new Integer(payload[5]));

        // Process 'Specific Device Class'
        response.put("SPECIFIC_DEVICE_CLASS", new Integer(payload[6]));

        // Process 'vg'

        // Create a list to hold the group vg
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 7;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Properties1'
            variant.put("END_POINT", new Integer(payload[7] & 0x7F));
            variant.put("RES", new Boolean((payload[7] & 0x80) != 0));

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 0] & 0xFF) >> 0;
        }

        // Add the variant list to the response
        response.put("VG", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_CHANNEL_END_POINT_GET command
     * Multi Channel End Point Get
     *
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiChannelEndPointGet() {
        logger.debug("Creating command message MULTI_CHANNEL_END_POINT_GET version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_CHANNEL_END_POINT_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_CHANNEL_END_POINT_GET command
     * Multi Channel End Point Get
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiChannelEndPointGet(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_CHANNEL_END_POINT_REPORT command
     * Multi Channel End Point Report
     *
     * @param res1 {@link Integer}
     * @param identical {@link Boolean}
     * @param dynamic {@link Boolean}
     * @param individualEndPoints {@link Integer}
     * @param res2 {@link Boolean}
     * @param aggregatedEndPoints {@link Integer}
     * @param res3 {@link Boolean}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiChannelEndPointReport(Integer res1, Boolean identical, Boolean dynamic,
            Integer individualEndPoints, Boolean res2, Integer aggregatedEndPoints, Boolean res3) {
        logger.debug("Creating command message MULTI_CHANNEL_END_POINT_REPORT version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_CHANNEL_END_POINT_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= res1 & 0x3F;
        valProperties1 |= identical ? 0x40 : 0;
        valProperties1 |= dynamic ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= individualEndPoints & 0x7F;
        valProperties2 |= res2 ? 0x80 : 0;
        outputData.write(valProperties2);

        // Process 'Properties3'
        int valProperties3 = 0;
        valProperties3 |= aggregatedEndPoints & 0x7F;
        valProperties3 |= res3 ? 0x80 : 0;
        outputData.write(valProperties3);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_CHANNEL_END_POINT_REPORT command
     * Multi Channel End Point Report
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiChannelEndPointReport(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("RES1", new Integer(payload[4] & 0x3F));
        response.put("IDENTICAL", new Boolean((payload[4] & 0x40) != 0));
        response.put("DYNAMIC", new Boolean((payload[4] & 0x80) != 0));

        // Process 'Properties2'
        response.put("INDIVIDUAL_END_POINTS", new Integer(payload[5] & 0x7F));
        response.put("RES2", new Boolean((payload[5] & 0x80) != 0));

        // Process 'Properties3'
        response.put("AGGREGATED_END_POINTS", new Integer(payload[6] & 0x7F));
        response.put("RES3", new Boolean((payload[6] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_INSTANCE_CMD_ENCAP command
     * Multi Instance Cmd Encap
     *
     * @param instance {@link Integer}
     * @param res {@link Boolean}
     * @param commandClass {@link Integer}
     * @param command {@link Integer}
     * @param parameter {@link int[]}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiInstanceCmdEncap(Integer instance, Boolean res, Integer commandClass, Integer command,
            int[] parameter) {
        logger.debug("Creating command message MULTI_INSTANCE_CMD_ENCAP version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_INSTANCE_CMD_ENCAP);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= instance & 0x7F;
        valProperties1 |= res ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Command Class'
        outputData.write(commandClass);

        // Process 'Command'
        outputData.write(command);

        // Process 'Parameter'
        for (int cntParameter = 0; cntParameter < parameter.length; cntParameter++) {
            outputData.write(parameter[cntParameter]);
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_INSTANCE_CMD_ENCAP command
     * Multi Instance Cmd Encap
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiInstanceCmdEncap(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("INSTANCE", new Integer(payload[msgOffset] & 0x7F));
        response.put("RES", new Boolean((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Command Class'
        response.put("COMMAND_CLASS", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Command'
        response.put("COMMAND", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Parameter'
        int lenParameter = payload.length - msgOffset;
        int[] valParameter = new int[lenParameter];
        for (int cntParameter = 0; cntParameter < lenParameter; cntParameter++) {
            valParameter[cntParameter] = payload[cntParameter + msgOffset];
        }
        response.put("PARAMETER", valParameter);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_INSTANCE_GET command
     * Multi Instance Get
     *
     * @param commandClass {@link Integer}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiInstanceGet(Integer commandClass) {
        logger.debug("Creating command message MULTI_INSTANCE_GET version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_INSTANCE_GET);

        // Process 'Command Class'
        outputData.write(commandClass);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_INSTANCE_GET command
     * Multi Instance Get
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiInstanceGet(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Command Class'
        response.put("COMMAND_CLASS", new Integer(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_INSTANCE_REPORT command
     * Multi Instance Report
     *
     * @param commandClass {@link Integer}
     * @param instances {@link Integer}
     * @param res {@link Boolean}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiInstanceReport(Integer commandClass, Integer instances, Boolean res) {
        logger.debug("Creating command message MULTI_INSTANCE_REPORT version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_INSTANCE_REPORT);

        // Process 'Command Class'
        outputData.write(commandClass);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= instances & 0x7F;
        valProperties1 |= res ? 0x80 : 0;
        outputData.write(valProperties1);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_INSTANCE_REPORT command
     * Multi Instance Report
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiInstanceReport(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Command Class'
        response.put("COMMAND_CLASS", new Integer(payload[4]));

        // Process 'Properties1'
        response.put("INSTANCES", new Integer(payload[5] & 0x7F));
        response.put("RES", new Boolean((payload[5] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_CHANNEL_AGGREGATED_MEMBERS_GET command
     * Multi Channel Aggregated Members Get
     *
     * @param aggregatedEndPoint {@link Integer}
     * @param res {@link Boolean}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiChannelAggregatedMembersGet(Integer aggregatedEndPoint, Boolean res) {
        logger.debug("Creating command message MULTI_CHANNEL_AGGREGATED_MEMBERS_GET version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_CHANNEL_AGGREGATED_MEMBERS_GET);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= aggregatedEndPoint & 0x7F;
        valProperties1 |= res ? 0x80 : 0;
        outputData.write(valProperties1);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_CHANNEL_AGGREGATED_MEMBERS_GET command
     * Multi Channel Aggregated Members Get
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiChannelAggregatedMembersGet(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("AGGREGATED_END_POINT", new Integer(payload[4] & 0x7F));
        response.put("RES", new Boolean((payload[4] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT command
     * Multi Channel Aggregated Members Report
     *
     * @param aggregatedEndPoint {@link Integer}
     * @param res {@link Boolean}
     * @param numberOfBitMasks {@link Integer}
     * @param aggregatedMembersBitMask {@link List<String>}
     * @return the {@link ZWaveCommandClassPayload} with the command to send
     */
    public byte[] getMultiChannelAggregatedMembersReport(Integer aggregatedEndPoint, Boolean res,
            Integer numberOfBitMasks, List<String> aggregatedMembersBitMask) {
        logger.debug("Creating command message MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT version 4");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= aggregatedEndPoint & 0x7F;
        valProperties1 |= res ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Number of Bit Masks'
        outputData.write(numberOfBitMasks);

        // Process 'Aggregated Members Bit Mask'
        int valAggregatedMembersBitMask = 0;
        outputData.write(valAggregatedMembersBitMask);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT command
     * Multi Channel Aggregated Members Report
     *
     * @param payload the {@link ZWaveCommandClassPayload} to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMultiChannelAggregatedMembersReport(int[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("AGGREGATED_END_POINT", new Integer(payload[4] & 0x7F));
        response.put("RES", new Boolean((payload[4] & 0x80) != 0));

        // Process 'Number of Bit Masks'
        response.put("NUMBER_OF_BIT_MASKS", new Integer(payload[5]));

        // Process 'Aggregated Members Bit Mask'
        List<String> responseAggregatedMembersBitMask = new ArrayList<String>();
        int lenAggregatedMembersBitMask = (payload[-1] & 0xFF) * 8;
        for (int cntAggregatedMembersBitMask = 0; cntAggregatedMembersBitMask < lenAggregatedMembersBitMask; cntAggregatedMembersBitMask++) {
            if ((payload[6 + (cntAggregatedMembersBitMask / 8)] & cntAggregatedMembersBitMask % 8) == 0) {
                continue;
            }
            responseAggregatedMembersBitMask.add("AGGREGATED_MEMBERS_BIT_MASK_" + cntAggregatedMembersBitMask);
        }
        response.put("AGGREGATED_MEMBERS_BIT_MASK", responseAggregatedMembersBitMask);

        // Return the map of processed response data;
        return response;
    }

}
